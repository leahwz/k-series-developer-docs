/**
 * Represents the error received after executing a native function.
 *
 * @typedef {Object} posError
 * @property {string} message A description of the error.
 */

/**
 * Represents the data received after executing a native function.
 *
 * @typedef {*} posData
 */

/**
 * Represents the response received after executing a native function.
 *
 * @typedef {Object} posResponse
 * @property {?posError} posResponse.error
 * @property {?posData} posResponse.data
 */

/**
 * Callback invoked in an asynchronous manner after executing a native function.
 *
 * @callback posCallback
 * @param {posResponse} response Contains the result of executing a native function.
 */

/** @type {Object.<string, posCallback>} */
const callbacks = {}

/**
 * Closes the web view hosted in the POS app.
 */
function pos_close() {
    const data = {
        name : 'close',
        args : {}
    }

    pos_postMessage(data)
}

/**
 * Hides the button that closes the web view hosted in the POS app.
 */
function pos_disableCloseButton() {
    const data = {
        name : 'disableCloseButton',
        args : {}
    }

    pos_postMessage(data)
}

/**
 * Opens the configured drawer.
 */
function pos_openDrawer() {
    const data = {
        name : 'openDrawer',
        args : {}
    }

    pos_postMessage(data)
}

/**
 * Forces a commit on the current account.
 */
function pos_forceCommitCurrentAccount() {
    const data = {
        name : 'forceCommitCurrentAccount',
        args : {}
    }

    pos_postMessage(data)
}

/**
 * Commits the current account.
 */
function pos_commitCurrentAccount() {
    const data = {
        name : 'commitCurrentAccount',
        args : {}
    }

    pos_postMessage(data)
}

/**
 * Loads an account identified by the specified number.
 *
 * @param {string} number Reference number used to identify the account to load.
 */
function pos_loadAccountForNumber(number) {
    const data = {
        name : 'loadAccountForNumber',
        args : { number }
    }

    pos_postMessage(data)
}

/**
 * Loads an account identified by the specified name.
 *
 * @param {string} name Reference name used to identify the account to load.
 */
function pos_loadAccountForName(name) {
    const data = {
        name : 'loadAccountForName',
        args : { name }
    }

    pos_postMessage(data)
}

/**
 * Prints out the specified text.
 *
 * @param {string} text The text to print out.
 */
function pos_printText(text) {
    const data = {
        name : 'printText',
        args : { text }
    }

    pos_postMessage(data)
}

/**
 * Adds an external reference with the specified prefix.
 *
 * @param {string} reference The reference to add.
 * @param {string} prefix The prefix to concatenate.
 */
function pos_addExternalReference(reference, prefix) {
    const data = {
        name : 'addExternalReference',
        args : { reference, prefix }
    }

    pos_postMessage(data)
}

/**
 * Changes the profile of the current account.
 *
 * @param {string} accountProfileCode Reference code used to identify the account profile.
 */
function pos_changeAccountProfile(accountProfileCode) {
    const data = {
        name : 'changeAccountProfile',
        args : { accountProfileCode }
    }

    pos_postMessage(data)
}

/**
 * Adds the specified item to the current account.
 *
 * @param {string} itemId Reference identifier used to identify the item to add.
 */
function pos_addItemToCurrentAccount(itemId) {
    const data = {
        name : 'addItemToCurrentAccount',
        args : { itemId }
    }

    pos_postMessage(data)
}

/**
 * Adds the specified special item to the current account.
 *
 * @param {string} itemId Reference identifier used to identify the item to add.
 * @param {number} priceCents The price of the item to add in cents.
 * @param {string} name The name of the item to add.
 */
function pos_addSpecialItemToCurrentAccount(itemId, priceCents, name) {
    const data = {
        name : 'addSpecialItemToCurrentAccount',
        args : { itemId, priceCents, name }
    }

    pos_postMessage(data)
}

/**
 * Stores data in the POS app's defaults using the specified key.
 *
 * @param {string} key The key to use to store the data.
 * @param {string} value The data to store.
 */
function pos_storeData(key, value) {
    const data = {
        name : 'storeData',
        args : { key, value }
    }

    pos_postMessage(data)
}

/**
 * Loads data from the POS app's defaults using the specified key.
 *
 * @param {string} key The key to use to retrieve the data.
 * @param {posCallback} callback The callback that'll be invoked when the native function is done executing.
 */
function pos_loadData(key, callback) {
    const callbackId = pos_generateCallbackId()
    callbacks[callbackId] = callback

    const data = {
        name : 'loadData',
        args : { key, callbackId }
    }

    pos_postMessage(data)
}

/**
 * Sets the specified covers to the current account.
 *
 * @param {number} coversPow2 The covers to set.
 */
function pos_setCurrentAccountCovers(coversPow2) {
    const data = {
        name : 'setCurrentAccountCovers',
        args : { coversPow2 }
    }

    pos_postMessage(data)
}

/**
 * Fetches the POS app's version number.
 *
 * @param {posCallback} callback The callback that'll be invoked when the native function is done executing.
 */
function pos_getVersion(callback) {
    const callbackId = pos_generateCallbackId()
    callbacks[callbackId] = callback

    const data = {
        name : 'getVersion',
        args : { callbackId }
    }

    pos_postMessage(data)
}

/**
 * Adds a payment to the current account.
 *
 * @param {number} amountCents The amount of the payment in cents.
 * @param {string} paymentMethodCode Reference code used to identify the payment method to use when adding the payment.
 * @param {posCallback} callback The callback that'll be invoked when the native function is done executing.
 */
function pos_addPayment(amountCents, paymentMethodCode, callback) {
    const callbackId = pos_generateCallbackId()
    callbacks[callbackId] = callback

    const data = {
        name : 'addPayment',
        args : { amountCents, paymentMethodCode, callbackId }
    }

    pos_postMessage(data)
}

/**
 * Pays for the current account.
 *
 * @param {string} paymentMethodCode Reference code used to identify the payment method to use when paying for the current account.
 * @param {posCallback} callback The callback that'll be invoked when the native function is done executing.
 */
function pos_payAccount(paymentMethodCode, callback) {
    const callbackId = pos_generateCallbackId()
    callbacks[callbackId] = callback

    const data = {
        name : 'payAccount',
        args : { paymentMethodCode, callbackId }
    }

    pos_postMessage(data)
}

/**
 * Fetches the current account.
 *
 * @param {posCallback} callback The callback that'll be invoked when the native function is done executing.
 */
function pos_getCurrentAccount(callback) {
    const callbackId = pos_generateCallbackId()
    callbacks[callbackId] = callback

    const data = {
        name : 'getCurrentAccount',
        args : { callbackId }
    }

    pos_postMessage(data)
}

/**
 * Fetches the currently configured available discounts.
 *
 * @param {posCallback} callback The callback that'll be invoked when the native function is done executing.
 */
function pos_getAvailableDiscounts(callback) {
    const callbackId = pos_generateCallbackId()
    callbacks[callbackId] = callback

    const data = {
        name : 'getAvailableDiscounts',
        args : { callbackId }
    }

    pos_postMessage(data)
}

/**
 * Toggles the specified discount on the specified line.
 *
 * @param {string} discountCode Reference code used to identify the discount to toggle.
 * @param {string} lineId Reference identifier used to identify the line containing the discount.
 * @param {posCallback} callback The callback that'll be invoked when the native function is done executing.
 */
function pos_toggleDiscount(discountCode, lineId, callback) {
    const callbackId = pos_generateCallbackId()
    callbacks[callbackId] = callback

    const data = {
        name : 'toggleDiscount',
        args : { discountCode, lineId, callbackId }
    }

    pos_postMessage(data)
}

/**
 * Toggles the specified global discount.
 *
 * @param {string} discountCode Reference code used to identify the discount to toggle.
 * @param {posCallback} callback The callback that'll be invoked when the native function is done executing.
 */
function pos_toggleGlobalDiscount(discountCode, callback) {
    const callbackId = pos_generateCallbackId()
    callbacks[callbackId] = callback

    const data = {
        name : 'toggleGlobalDiscount',
        args : { discountCode, callbackId }
    }

    pos_postMessage(data)
}

/**
 * Sets the consumer for the current account.
 *
 * @param {Object} consumer The consumer object to set.
 */
function pos_setConsumer(consumer) {
    const data = {
        name : 'setConsumer',
        args : { consumer }
    }

    pos_postMessage(data)
}

/**
 * Sends a message to the POS app in order to execute some function or relay some information.
 *
 * @param {Object} data Object containing information relevant to the message.
 */
function pos_postMessage(data) {
    try { window.webkit.messageHandlers.functionMessageHandler.postMessage(data) }
    catch (error) { console.log(error) }
}

/**
 * Invokes the specified callback with the received data.
 *
 * @param {string} callbackId The identifier of the callback to invoke.
 * @param {*} data The data received after a successful native function execution.
 */
function pos_relaySuccessfulFunctionExecution(callbackId, data) {
    const callback = callbacks[callbackId]
    const response = { error: null, data }

    if (typeof data === 'string') {
        try {
            const json = JSON.parse(data)
            response.data = json
        } catch(err) {}
    }

    callback(response)
    delete callbacks[callbackId]
}

/**
 * Invokes the specified callback with the received error message.
 *
 * @param {string} callbackId The identifier of the callback to invoke.
 * @param {string} errorMessage The error message received after a failed native function execution.
 */
function pos_relayFailedFunctionExecution(callbackId, errorMessage) {
    const callback = callbacks[callbackId]
    const response = { error: { message: errorMessage }, data: null }

    callback(response)
    delete callbacks[callbackId]
}

// Taken from https://stackoverflow.com/questions/105034/how-to-create-guid-uuid/2117523#2117523.

/**
 * Generates a valid UUID.
 *
 * @returns {string} A valid UUID.
 */
function pos_generateUUIDV4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8)
      return v.toString(16)
    })
}

/**
 * Generates a unique callback identifier.
 *
 * @returns {string} A unique identifier.
 */
function pos_generateCallbackId() {
    let uuid = pos_generateUUIDV4()

    while (callbacks[uuid]) {
        uuid = pos_generateUUIDV4()
    }

    return uuid
}
